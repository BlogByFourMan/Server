/*
 * Swagger Blog
 *
 * Simple Blog
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"github.com/BlogByFourMan/Server/dal/db"
	"github.com/BlogByFourMan/Server/dal/model"
)

type MyResponse struct {
	OkMessage    string `json:"ok,omitempty"`
	ErrorMessage string `json:"error,,omitempty"`
}

func Response(response MyResponse, w http.ResponseWriter, code int) {
	jsonData, jErr := json.Marshal(&response)

	if jErr != nil {
		log.Fatal(jErr.Error())
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(jsonData)
	w.WriteHeader(code)
}

func ArticleIdCommentPost(w http.ResponseWriter, r *http.Request) {
	db.Init()

	var comment model.Comment

	err := json.NewDecoder(r.Body).Decode(&comment)

	if err != nil {
		Response(MyResponse{
			"",
			err.Error(),
		}, w, http.StatusBadRequest)
	}

	articles := db.GetArticles(comment.ArticleId)

	if len(articles) == 0 {
		Response(MyResponse{
			"",
			"articles not found",
		}, w, http.StatusBadRequest)
	}

	for _, article := range articles {
		article.Comments = append(article.Comments, comment)
	}

	err = db.PutArticles(articles)

	if err != nil {
		Response(MyResponse{
			"",
			err.Error(),
		}, w, http.StatusBadRequest)
	}

	Response(MyResponse{
		"comment add success",
		"",
	}, w, http.StatusAccepted)
}

func UserLoginPost(w http.ResponseWriter, r *http.Request) {

	db.Init()

	var user model.User

	err := json.NewDecoder(r.Body).Decode(&user)

	if err != nil {
		Response(MyResponse{
			"",
			"parameter error",
		}, w, http.StatusBadRequest)
	}

	check := db.GetUser(user.Username)

	if check.Username != user.Username || check.Password != user.Password {
		Response(MyResponse{
			"",
			"username or password error",
		}, w, http.StatusBadRequest)
		return
	}

	Response(MyResponse{
		"log in success",
		"",
	}, w, http.StatusAccepted)
}

func UserRegisterPost(w http.ResponseWriter, r *http.Request) {

	db.Init()

	var user model.User

	err := json.NewDecoder(r.Body).Decode(&user)
	r.ParseForm()
	value := r.Form
	fmt.Println(value)
	if err != nil {
		Response(MyResponse{
			"",
			"parameter error",
		}, w, http.StatusBadRequest)
	}

	check := db.GetUser(user.Username)

	if check.Username != "" {
		Response(MyResponse{
			"",
			"username existed",
		}, w, http.StatusBadRequest)
		return
	}

	err = db.PutUsers([]model.User{user})

	if err != nil {
		Response(MyResponse{
			"",
			err.Error(),
		}, w, http.StatusBadRequest)
	}

	Response(MyResponse{
		"register success",
		"",
	}, w, http.StatusAccepted)

}
